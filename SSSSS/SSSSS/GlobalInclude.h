#pragma once
//The perspective projection matrix generated by GLM will use 
//the OpenGL depth range of -1.0 to 1.0 by default. 
//We need to configure it to use the Vulkan range of 0.0 to 1.0 
//using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition.
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <string>
#include <iostream>
#include <array>

#include <vulkan/vulkan.h>

enum class UNIFORM_SLOT { SCENE, FRAME, PASS, OBJECT, COUNT };

struct UNIFORM_SLOT_DATA
{
	uint32_t uboBindingOffset;
	uint32_t uboBindingCount;
	uint32_t textureBindingOffset;
	uint32_t textureBindingCount;
};

const UNIFORM_SLOT_DATA UniformSlotData[static_cast<uint32_t>(UNIFORM_SLOT::COUNT)] =
{
	{0, 1, 1, 0},//scene
	{0, 1, 1, 0},//frame
	{0, 1, 1, 1},//pass
	{0, 1, 1, 0} //object
};

//stored in scene
struct SceneUniformBufferObject {
	uint16_t time;
};

//stored in pass
struct PassUniformBufferObject {
	glm::mat4 view;
	glm::mat4 proj;
	uint16_t passNum;
};

//stored in mesh
struct ObjectUniformBufferObject {
	glm::mat4 model;
};

//stored in renderer (because related to swap chain)
struct FrameUniformBufferObject {
	uint16_t frameNum;
};

struct Vertex {
	glm::vec3 pos;
	glm::vec3 color;
	glm::vec2 texCoord;

	static VkVertexInputBindingDescription getBindingDescription() {
		VkVertexInputBindingDescription bindingDescription = {};
		bindingDescription.binding = 0;
		bindingDescription.stride = sizeof(Vertex);
		bindingDescription.inputRate = VK_VERTEX_INPUT_RATE_VERTEX;

		return bindingDescription;
	}

	static std::array<VkVertexInputAttributeDescription, 3> getAttributeDescriptions() {
		std::array<VkVertexInputAttributeDescription, 3> attributeDescriptions = {};

		attributeDescriptions[0].binding = 0;
		attributeDescriptions[0].location = 0;
		attributeDescriptions[0].format = VK_FORMAT_R32G32B32_SFLOAT;
		attributeDescriptions[0].offset = offsetof(Vertex, pos);

		attributeDescriptions[1].binding = 0;
		attributeDescriptions[1].location = 1;
		attributeDescriptions[1].format = VK_FORMAT_R32G32B32_SFLOAT;
		attributeDescriptions[1].offset = offsetof(Vertex, color);

		attributeDescriptions[2].binding = 0;
		attributeDescriptions[2].location = 2;
		attributeDescriptions[2].format = VK_FORMAT_R32G32_SFLOAT;
		attributeDescriptions[2].offset = offsetof(Vertex, texCoord);

		return attributeDescriptions;
	}
};
