#pragma once
//The perspective projection matrix generated by GLM will use 
//the OpenGL depth range of -1.0 to 1.0 by default. 
//We need to configure it to use the Vulkan range of 0.0 to 1.0 
//using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition.
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <string>
#include <iostream>
#include <vector>
#include <array>

#include <vulkan/vulkan.h>

enum class UNIFORM_SLOT { SCENE, FRAME, PASS, OBJECT, COUNT };

//stored in scene
struct SceneUniformBufferObject {
	uint32_t time = 0;
	uint32_t mode = 0;
};

//stored in pass
struct PassUniformBufferObject {
	glm::mat4 view = glm::mat4(1);
	glm::mat4 proj = glm::mat4(1);
	uint32_t passNum = 0;
};

//stored in mesh
struct ObjectUniformBufferObject {
	glm::mat4 model = glm::mat4(1);
	glm::mat4 modelInvTrans = glm::mat4(1);
};

//stored in renderer (because related to swap chain)
struct FrameUniformBufferObject {
	uint32_t frameNum = 0;
};

struct Vertex {
	glm::vec3 pos;
	glm::vec3 normal;
	glm::vec4 tangent;
	glm::vec2 texCoord;

	static VkVertexInputBindingDescription getBindingDescription() {
		VkVertexInputBindingDescription bindingDescription = {};
		bindingDescription.binding = 0;
		bindingDescription.stride = sizeof(Vertex);
		bindingDescription.inputRate = VK_VERTEX_INPUT_RATE_VERTEX;

		return bindingDescription;
	}

	static std::array<VkVertexInputAttributeDescription,4> getAttributeDescriptions() {
		std::array<VkVertexInputAttributeDescription, 4> attributeDescriptions = {};

		attributeDescriptions[0].binding = 0;
		attributeDescriptions[0].location = 0;
		attributeDescriptions[0].format = VK_FORMAT_R32G32B32_SFLOAT;
		attributeDescriptions[0].offset = offsetof(Vertex, pos);

		attributeDescriptions[1].binding = 0;
		attributeDescriptions[1].location = 1;
		attributeDescriptions[1].format = VK_FORMAT_R32G32B32_SFLOAT;
		attributeDescriptions[1].offset = offsetof(Vertex, normal);

		attributeDescriptions[2].binding = 0;
		attributeDescriptions[2].location = 2;
		attributeDescriptions[2].format = VK_FORMAT_R32G32B32A32_SFLOAT;
		attributeDescriptions[2].offset = offsetof(Vertex, tangent);

		attributeDescriptions[3].binding = 0;
		attributeDescriptions[3].location = 3;
		attributeDescriptions[3].format = VK_FORMAT_R32G32_SFLOAT;
		attributeDescriptions[3].offset = offsetof(Vertex, texCoord);

		return attributeDescriptions;
	}
};
